{"ast":null,"code":"var _jsxFileName = \"/Users/janaina/Documents/CODE/HI\\u0301BRIDO/fullstack/github-api-proxy-frontend/src/components/UserList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GitHubService from '../api/GitHubService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserList = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersData = await GitHubService.getUsers();\n        if (Array.isArray(usersData)) {\n          // Check if the response is an array\n          setUsers(usersData);\n        } else {\n          // Handle the case where usersData is not an array\n          console.error('Expected an array of users, but got:', usersData);\n        }\n      } catch (err) {\n        // Handle error state\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  // Conditional rendering to ensure users is an array\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-list\",\n    children: Array.isArray(users) && users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => onSelectUser(user.login),\n      children: user.login\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(UserList, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = UserList;\nexport default UserList;\nvar _c;\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"names":["React","useState","useEffect","GitHubService","jsxDEV","_jsxDEV","UserList","_s","users","setUsers","fetchUsers","usersData","getUsers","Array","isArray","console","error","err","className","children","map","user","onClick","onSelectUser","login","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/janaina/Documents/CODE/HÍBRIDO/fullstack/github-api-proxy-frontend/src/components/UserList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GitHubService from '../api/GitHubService';\n\nconst UserList = () => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersData = await GitHubService.getUsers();\n        if (Array.isArray(usersData)) { // Check if the response is an array\n          setUsers(usersData);\n        } else {\n          // Handle the case where usersData is not an array\n          console.error('Expected an array of users, but got:', usersData);\n        }\n      } catch (err) {\n        // Handle error state\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  // Conditional rendering to ensure users is an array\n  return (\n    <div className=\"user-list\">\n      {Array.isArray(users) && users.map(user => (\n        <div key={user.id} onClick={() => onSelectUser(user.login)}>\n          {user.login}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default UserList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMR,aAAa,CAACS,QAAQ,CAAC,CAAC;QAChD,IAAIC,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;UAAE;UAC9BF,QAAQ,CAACE,SAAS,CAAC;QACrB,CAAC,MAAM;UACL;UACAI,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEL,SAAS,CAAC;QAClE;MACF,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZ;MAAA;IAEJ,CAAC;IAEDP,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEL,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBN,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,IAAIA,KAAK,CAACY,GAAG,CAACC,IAAI,iBACrChB,OAAA;MAAmBiB,OAAO,EAAEA,CAAA,KAAMC,YAAY,CAACF,IAAI,CAACG,KAAK,CAAE;MAAAL,QAAA,EACxDE,IAAI,CAACG;IAAK,GADHH,IAAI,CAACI,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/BID,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAiCd,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}